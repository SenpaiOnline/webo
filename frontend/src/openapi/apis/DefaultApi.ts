/* tslint:disable */
/* eslint-disable */
/**
 * Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime'
import {
  EvolveCharacter,
  EvolveDialogueDto,
  EvolveDialogueDtoFromJSON,
  EvolveDialoguesMetaDto,
  EvolveDialoguesMetaDtoFromJSON,
} from '../models'

export interface CharacterMetaRequest {
  character: EvolveCharacter;
}

export interface FindTwentyDialoguesByCharacterRequest {
  character: EvolveCharacter;
  offset: number;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {

  /**
   */
  async characterMetaRaw(requestParameters: CharacterMetaRequest): Promise<runtime.ApiResponse<EvolveDialoguesMetaDto>> {
    if (requestParameters.character === null || requestParameters.character === undefined) {
      throw new runtime.RequiredError('character', 'Required parameter requestParameters.character was null or undefined when calling characterMeta.')
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/api/evolve/meta/dialogues/{character}`.replace(`{${'character'}}`, encodeURIComponent(String(requestParameters.character))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) => EvolveDialoguesMetaDtoFromJSON(jsonValue))
  }

  /**
   */
  async characterMeta(requestParameters: CharacterMetaRequest): Promise<EvolveDialoguesMetaDto> {
    const response = await this.characterMetaRaw(requestParameters)
    return await response.value()
  }

  /**
   */
  async findTwentyDialoguesByCharacterRaw(requestParameters: FindTwentyDialoguesByCharacterRequest): Promise<runtime.ApiResponse<Array<EvolveDialogueDto>>> {
    if (requestParameters.character === null || requestParameters.character === undefined) {
      throw new runtime.RequiredError('character', 'Required parameter requestParameters.character was null or undefined when calling findTwentyDialoguesByCharacter.')
    }

    if (requestParameters.offset === null || requestParameters.offset === undefined) {
      throw new runtime.RequiredError('offset', 'Required parameter requestParameters.offset was null or undefined when calling findTwentyDialoguesByCharacter.')
    }

    const queryParameters: any = {}

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/api/evolve/dialogues/{character}`.replace(`{${'character'}}`, encodeURIComponent(String(requestParameters.character))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EvolveDialogueDtoFromJSON))
  }

  /**
   */
  async findTwentyDialoguesByCharacter(requestParameters: FindTwentyDialoguesByCharacterRequest): Promise<Array<EvolveDialogueDto>> {
    const response = await this.findTwentyDialoguesByCharacterRaw(requestParameters)
    return await response.value()
  }

}
